import React, { useState } from 'react';
import { X, Send, AlertTriangle, CheckCircle } from 'lucide-react';
import type { Network } from '../types/wallet';
import axios from 'axios';
import { dilithium } from 'dilithium-crystals';

const env = import.meta.env.VITE_ENV;
const apiUrl = import.meta.env.VITE_API_URL;

type Props = {
  isOpen: boolean;
  onClose: () => void;
  network: Network;
};

type Step = 'form' | 'confirm' | 'processing' | 'success';

export default function SendModal({ isOpen, onClose, network }: Props) {
  const [step, setStep] = useState<Step>('form');
  const [amount, setAmount] = useState('');
  const [address, setAddress] = useState('');

  // Utility to convert hex string to Uint8Array
  function hexToUint8Array(hexString: string): Uint8Array {
    if (!hexString || hexString.length % 2 !== 0) {
      throw new Error('Invalid hex string');
    }
    const byteArray = new Uint8Array(hexString.length / 2);
    for (let i = 0; i < hexString.length; i += 2) {
      byteArray[i / 2] = parseInt(hexString.substr(i, 2), 16);
    }
    return byteArray;
  }

  // Utility to convert Uint8Array to hex string
  function uint8ArrayToHex(uint8Array: Uint8Array): string {
    return Array.from(uint8Array)
      .map((byte) => byte.toString(16).padStart(2, '0'))
      .join('');
  }

  // Utility to serialize the transaction object
  function serializeTransaction(sender: string, receiver: string, amount: string, nonce?: number): string {
    nonce = nonce || Math.floor(Date.now());
    return `${sender}:${receiver}:${amount}:${nonce}`;
  }

  // Load keys from localStorage
  function loadKeysFromLocalStorage() {
    const pubkeyHex = localStorage.getItem('bqs.publickey');
    const privkeyHex = localStorage.getItem('bqs.privatekey');
    const address = localStorage.getItem('bqs.address');

    if (!pubkeyHex || !privkeyHex || !address) {
      throw new Error('Keys not found in localStorage');
    }

    return {
      publicKey: hexToUint8Array(pubkeyHex),
      privateKey: hexToUint8Array(privkeyHex),
      address,
    };
  }

  // Utility to convert Uint8Array to Base64
function uint8ArrayToBase64(array) {
  return btoa(String.fromCharCode(...array));
}

  // Sign and broadcast transaction
  async function signAndBroadcastTransaction(sender: string, receiver: string, amount: string) {
    try {
      // Load keys from localStorage
      const { publicKey, privateKey, address } = loadKeysFromLocalStorage();

      // Serialize and encode transaction data
      const transactionData = serializeTransaction(sender, receiver, amount);
      const transactionDataBytes = new TextEncoder().encode(transactionData);

      // Sign the transaction
      const signature = await dilithium.signDetached(transactionDataBytes, privateKey);

      // Verify the signature
      const isValid = await dilithium.verifyDetached(signature, transactionDataBytes, publicKey);
      if (!isValid) {
        alert('Signature verification failed!');
        return;
      }

      alert('Signature verified successfully!');

      // Convert to Base64 for sending to backend
      const signatureBase64 = uint8ArrayToBase64(signature);
      const publicKeyBase64 = uint8ArrayToBase64(publicKey);
      const transactionDataBase64 = uint8ArrayToBase64(transactionDataBytes);

      console.log("Serialized Transaction Base64:", transactionDataBase64);
      console.log("Signature Base64:", signatureBase64);
      console.log("Public Key Base64:", publicKeyBase64);

      console.log("Serialized Transaction Bytes (Browser):", Array.from(transactionDataBytes));

      // Send to backend
      await axios.post(`${apiUrl}/worker`, {
        request_type: "broadcast_tx",
        transaction_data: transactionDataBase64, // Base64 encoded
        signature: signatureBase64,             // Base64 encoded
        pubkey: publicKeyBase64,                // Base64 encoded
      });

      console.log('Transaction broadcast response:', response.data);
      setStep('success');
    } catch (error) {
      console.error('Error signing or broadcasting transaction:', error);
      alert('Failed to send transaction.');
    }
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setStep('confirm');
  };

  const handleConfirm = async () => {
    setStep('processing');
    try {
      const sender = localStorage.getItem('bqs.address');
      const receiver = address;

      if (!sender || !receiver || !amount) {
        alert('Missing transaction details.');
        return;
      }

      await signAndBroadcastTransaction(sender, receiver, amount);
    } catch (error) {
      console.error('Send failed:', error);
      setStep('form');
    }
  };

  const handleClose = () => {
    setStep('form');
    setAmount('');
    setAddress('');
    onClose();
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
      <div className="bg-white rounded-lg max-w-md w-full">
        <div className="flex justify-between items-center p-6 border-b border-gray-200">
          <h3 className="text-lg font-medium text-gray-900">
            {step === 'confirm' && 'Confirm Transaction'}
            {step === 'processing' && 'Processing Transaction'}
            {step === 'success' && 'Transaction Complete'}
            {step === 'form' && 'Send BQS'}
          </h3>
          {step !== 'processing' && (
            <button onClick={handleClose} className="text-gray-400 hover:text-gray-500">
              <X className="h-6 w-6" />
            </button>
          )}
        </div>

        <div className="p-6">
          {step === 'form' && (
            <form onSubmit={handleSubmit} className="space-y-6">
              <div>
                <label htmlFor="amount" className="block text-sm font-medium text-gray-700">
                  Amount (BQS)
                </label>
                <div className="mt-1">
                  <input
                    type="number"
                    id="amount"
                    step="0.00000001"
                    min="0"
                    required
                    className="shadow-sm focus:ring-orange-500 focus:border-orange-500 block w-full sm:text-sm border-gray-300 rounded-md"
                    value={amount}
                    onChange={(e) => setAmount(e.target.value)}
                  />
                </div>
              </div>

              <div>
                <label htmlFor="address" className="block text-sm font-medium text-gray-700">
                  Recipient Address
                </label>
                <div className="mt-1">
                  <input
                    type="text"
                    id="address"
                    required
                    placeholder="qs1q..."
                    className="shadow-sm focus:ring-orange-500 focus:border-orange-500 block w-full sm:text-sm border-gray-300 rounded-md"
                    value={address}
                    onChange={(e) => setAddress(e.target.value)}
                  />
                </div>
              </div>

              <div className="flex justify-end">
                <button
                  type="submit"
                  className={`inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white ${
                    network === 'mainnet'
                      ? 'bg-orange-500 hover:bg-orange-600'
                      : 'bg-purple-500 hover:bg-purple-600'
                  }`}
                >
                  <Send className="mr-2 h-4 w-4" />
                  Continue
                </button>
              </div>
            </form>
          )}

          {step === 'confirm' && (
            <div className="space-y-6">
              <div className="bg-yellow-50 p-4 rounded-md">
                <div className="flex">
                  <div className="flex-shrink-0">
                    <AlertTriangle className="h-5 w-5 text-yellow-400" />
                  </div>
                  <div className="ml-3">
                    <h3 className="text-sm font-medium text-yellow-800">Please Confirm</h3>
                    <div className="mt-2 text-sm text-yellow-700">
                      <p>You are about to send {amount} BQS to:</p>
                      <p className="mt-1 font-mono">{address}</p>
                      <p className="mt-2">This action cannot be undone.</p>
                    </div>
                  </div>
                </div>
              </div>

              <div className="flex justify-end space-x-4">
                <button
                  onClick={() => setStep('form')}
                  className="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50"
                >
                  Back
                </button>
                <button
                  onClick={handleConfirm}
                  className={`inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white ${
                    network === 'mainnet'
                      ? 'bg-orange-500 hover:bg-orange-600'
                      : 'bg-purple-500 hover:bg-purple-600'
                  }`}
                >
                  Confirm Send
                </button>
              </div>
            </div>
          )}

          {step === 'processing' && (
            <div className="text-center py-8">
              <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-orange-500 mx-auto"></div>
              <p className="mt-4 text-sm text-gray-500">Processing your transaction...</p>
              <p className="mt-2 text-xs text-gray-400">This may take a few moments</p>
            </div>
          )}

          {step === 'success' && (
            <div className="space-y-6">
              <div className="text-center">
                <CheckCircle className={`h-12 w-12 mx-auto ${
                  network === 'mainnet' ? 'text-orange-500' : 'text-purple-500'
                }`} />
                <h3 className="mt-4 text-lg font-medium text-gray-900">Transaction Successful</h3>
                <p className="mt-2 text-sm text-gray-500">
                  Your transaction has been successfully processed and broadcast to the network.
                </p>
              </div>

              <div className="bg-gray-50 p-4 rounded-md">
                <dl className="space-y-2 text-sm">
                  <div className="flex justify-between">
                    <dt className="text-gray-500">Amount:</dt>
                    <dd className="text-gray-900">{amount} BQT</dd>
                  </div>
                  <div className="flex justify-between">
                    <dt className="text-gray-500">Recipient:</dt>
                    <dd className="text-gray-900 font-mono">{address}</dd>
                  </div>
                </dl>
              </div>

              <div className="flex justify-end">
                <button
                  onClick={handleClose}
                  className={`inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white ${
                    network === 'mainnet'
                      ? 'bg-orange-500 hover:bg-orange-600'
                      : 'bg-purple-500 hover:bg-purple-600'
                  }`}
                >
                  Close
                </button>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}